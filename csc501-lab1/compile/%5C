#include "sched.h"
#include "q.h"
#include "kernel.h"
#include "proc.h"
#include "lab1.h"
/* deciding which process needs to be picked up next based on the random value
 generated by the expdev()*/
int pick_nextproc(int rand)
{
	int curr_proc = q[rdytail].qprev;
	int prev_proc = q[curr_proc].qprev;

 	while((rand < q[prev_proc].qkey) && (q[prev_proc].qkey < NPROC))
  	{
       		/*if two processes have the same priority then, we need to take care
       		 that the process that was first pushed inside the queue needs to be
       		scheduled before the other process with same priority -> this also takes care
 		of the round-robin feature, as the process being picked is always in the front*/
       		if(q[curr_proc].qkey != q[prev_proc].qkey)
       		{
      		    curr_proc = prev_proc;
       		}
       		prev_proc = q[prev_proc].qprev;
  	}
	if(curr_proc > NPROC)
	{
	       	return NULLPROC;
  	}
   	else
  	{
    	    return curr_proc;
    	}
}

/* find the process with maximum goodness value*/
int find_next_proc()
{

	int i;
	int best_goodness;
        int next_process = 0;
        for (i = q[rdytail].qprev; i != rdyhead; i = q[i].qprev)
        {
                if (proctab[i].goodness > best_goodness)
                {
                         next_process = i;
                         best_goodness = proctab[i].goodness;
                }
        }
        if(next_process > NPROC)
        {
                return NULLPROC;
        }
	else{return next_process;}

}

void print_queue()
{
	int iter;
	printf("stuff in queue\n");
	for( iter = q[rdytail].qprev; iter != rdyhead; iter = q[iter].qprev)
	{
		printf("%d->%d\n",proctab[q[iter].qkey].pname,proctab[iter].goodness);
	}
}


/*initialize the epoch */
void init_epoch(struct pentry *old)
{
	epoch_flag = 1;
	int i;
	struct pentry *currp;
	for(i=0; i<NPROC; i++)
	{
		currp = &proctab[i];
		if(currp->pstate != PRFREE)
		{
			//Either the current proc finished executing in the prev epoch or just about to start in this epoch.
			if(currp->residual_time == currp->time_alloted || currp->residual_time == 0)
			{
				currp->time_alloted = currp->pprio;
				currp->residual_time = currp->time_alloted;
				currp->goodness = currp->pprio + currp->residual_time;
			}
			//if the proc in the prev. epoch did not complete it entire time alloted(quantum).
			else
			{
				currp->time_alloted = currp->pprio + (currp->residual_time/2);
				currp->residual_time = currp->time_alloted;
				currp->goodness = currp->pprio + currp->residual_time;
			}
		}
		//after initializing the epoch(goodness and time_alloted), we need to reset the preempt
		//with the residual_time of the process that was running previously.
		preempt = old->residual_time;
	}
}

void setschedclass (int passed_class)
{
	sched_class = passed_class;
}

int getschedclass(){
	return(sched_class);
}

/* getproc -- this is to dequeue the process we selected using the expsched
 *  * The point of dequeuing is to push the current process out so, when it is
 *   * inserted back, it will sit behind a process with same prioirty. Since the logic
 *    * to select a new process is designed in a way, it picks the process which is in the
 *     * front amongst two similar priority processes, it will automatically round-robin
 *      * with eachother.*/

int getproc(int proc)
{
    if(proc < NPROC)
    {
        return(dequeue(proc));
    }
    else
    {
        return(EMPTY);
    }
}

